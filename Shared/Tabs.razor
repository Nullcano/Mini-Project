<CascadingValue Value="this">
  <div class="tabs">
    <div class="tab-container">
      @foreach (Tab tabPage in Pages)
      {
        <div class="tab @GetTabCSS(tabPage)" @onclick=@( () => ActivatePage(tabPage) )>
          <div class="icon" style="background-image: url(@tabPage.Icon)"></div>
          <div class="label">@tabPage.Text</div>
        </div>
      }
    </div>
    <div class="tab-content">
      @ChildContent
    </div>
  </div>
</CascadingValue>

@code {
  [Parameter] public RenderFragment? ChildContent { get; set; }

  [Parameter] public EventCallback<Tab> OnTabChanged { get; set; }

  public Tab? ActivePage { get; set; }
  List<Tab> Pages = new List<Tab>();

  internal void AddPage(Tab tabPage)
  {
    Pages.Add(tabPage);
    if (Pages.Count == 1)
      ActivePage = tabPage;

    StateHasChanged();
  }

  string GetTabCSS(Tab page)
  {
    if (!page.Enabled)
      return "tab-disabled";

    return page == ActivePage ? "tab-active" : "";
  }

  void ActivatePage(Tab page)
  {
    if (page.Enabled)
    {
      ActivePage = page;
      OnTabChanged.InvokeAsync(page);
    }
  }
}