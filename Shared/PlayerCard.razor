@inject ProfileState ProfileState
@inject LinesCurrentState LinesCurrentState
@inject LinesClickState LinesClickState
@inject LinesIdleState LinesIdleState
@inject Formatter Formatter
@implements IDisposable

<div class="playercard">
  <div class="player-icon" style="background-image:url(@ProfileState.PlayerIcon)"></div>
  <div class="player-info">
    <div class="player-name">
      <span>@ProfileState.Playername</span>
      <span class="edit">üñäÔ∏è</span>
    </div>
    <div class="stats-container">
      <span>has written @(Formatter.FormatNum(LinesCurrentState.LinesCurrent)) Lines of Code</span>
      <span>(@(Formatter.FormatNum(LinesIdleState.LinesIdle)) LoC/sec)</span>
    </div>
  </div>
</div>

@code {
  protected override void OnInitialized()
  {
    LinesCurrentState.OnChange += LogAndUpdate;
    AddLinesIdle();
  }

  Timer? timer = default;

  private void LogAndUpdate()
  {
    //Console.WriteLine($"Lines: {LinesCurrentState.LinesCurrent}");
    StateHasChanged();
  }

  private void AddLinesIdle()
  {
    timer = new Timer(new TimerCallback(_ =>
    {
      LinesCurrentState.LinesCurrent += LinesIdleState.LinesIdle / 10;
    }), null, 100, 100);
  }

  void IDisposable.Dispose()
  {
    LinesCurrentState.OnChange -= LogAndUpdate;
  }

}