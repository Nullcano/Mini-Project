@inject UpgradesState UpgradesState
@inject LinesCurrentState LinesCurrentState
@inject LinesClickState LinesClickState
@inject LinesIdleState LinesIdleState

<div class="upgrades-container">
  <div class="heading">
    <div class="icon"></div>
    <span>Upgrades</span>
  </div>

  @foreach (var upgrade in UpgradesState.Upgrades) 
  {
    if (upgrade.Type == "Idle") {
      <div class="upgrade idle" @onclick="@(() => this.BuyUpgrade(upgrade))">
        <div class="upgrade-icon" style="background-image: url(@upgrade.Icon)"></div>
        <div class="upgrade-info">
          <div class="upgrade-name">
            <span>@upgrade.Name</span>
            <span>Lvl. @upgrade.Level</span>
          </div>
          <span class="upgrade-description">@upgrade.Description</span>
          <span class="upgrade-effect">Effect: +@(Math.Round(upgrade.Effect, 2)) LoC per second</span>
          <span class="upgrade-cost">Cost: Deletes @(Math.Round(upgrade.Cost, 2)) LoC</span>
        </div>
      </div>
    } else if (upgrade.Type == "Click") {
      <div class="upgrade click" @onclick="@(() => this.BuyUpgrade(upgrade))">
        <div class="upgrade-icon" style="background-image: url(@upgrade.Icon)"></div>
        <div class="upgrade-info">
          <div class="upgrade-name">
            <span>@upgrade.Name</span>
            <span>Lvl. @upgrade.Level</span>
          </div>
          <span class="upgrade-description">@upgrade.Description</span>
          <span class="upgrade-effect">Effect: +@(Math.Round(upgrade.Effect, 2)) LoC per click</span>
          <span class="upgrade-cost">Cost: Deletes @(Math.Round(upgrade.Cost, 2)) LoC</span>
        </div>
      </div>
    }
  }
</div>

@code {
  private void BuyUpgrade(UpgradesState.Upgrade upgrade) {
    if (LinesCurrentState.LinesCurrent >= upgrade.Cost) {
      LinesCurrentState.LinesCurrent -= upgrade.Cost;
      upgrade.Level++;
      upgrade.Cost = upgrade.Cost * 1.2;
      if (upgrade.Type == "Idle") {
        LinesIdleState.LinesIdle += upgrade.Effect;
      } else if (upgrade.Type == "Click") {
        LinesClickState.LinesClick += upgrade.Effect;
      }
      upgrade.Effect = upgrade.Effect * 1.2;
      this.StateHasChanged();
    }
  }
}